{:definitions {"main/dispatch!" ["defn" "dispatch!" ["op" "op-data"]], "main/-main!" ["defn" "-main!" [] ["enable-console-print!"] ["if" ["not" ["empty?" "ssr-stages"]] ["let" [["target" [".querySelector" "js/document" "|#app"]]] ["falsify-stage!" "target" ["render-element" ["comp-container" "@store-ref" "ssr-stages"] "states-ref"] "dispatch!"]]] ["render-app!"] ["add-watch" "store-ref" ":gc" ["fn" [] ["gc-states!" "states-ref"]]] ["add-watch" "store-ref" ":changes" "render-app!"] ["add-watch" "states-ref" ":changes" "render-app!"] ["println" "|App started!"]], "main/on-jsload!" ["defn" "on-jsload!" [] ["clear-cache!"] ["render-app!"] ["println" "|Code update."]], "main/render-app!" ["defn" "render-app!" [] ["let" [["target" [".querySelector" "js/document" "|#app"]]] ["render!" ["comp-container" "@store-ref"] "target" "dispatch!" "states-ref"]]], "comp.md-block/comp-md-block" ["def" "comp-md-block" ["create-comp" ":md-block" ["fn" ["text" "options"] ["fn" ["state" "mutate!"] ["div" ["{}"] ["comp-text" ["split-block" "text"] "nil"]]]]]], "comp.container/init-state" ["defn" "init-state" ["&" "args"] ["{}" [":draft" "|"]]], "comp.container/render" ["defn" "render" ["store"] ["fn" ["state" "mutate!"] ["div" ["{}" [":style" ["merge" "ui/global" "ui/row"]]] ["textarea" ["{}" [":style" ["merge" "ui/textarea" "style-text"]] [":attrs" ["{}" [":placeholder" "|Some markdown content"] [":value" [":draft" "state"]]]] [":event" ["{}" [":input" ["fn" ["e" "dispatch!"] ["mutate!" ":draft" [":value" "e"]]]]]]]] ["comp-space" "8" "nil"] ["comp-md-block" [":draft" "state"] ["{}"]]]]], "main/ssr-stages" ["def" "ssr-stages" ["let" [["ssr-element" [".querySelector" "js/document" "|#ssr-stages"]] ["ssr-markup" [".getAttribute" "ssr-element" "|content"]]] ["read-string" "ssr-markup"]]], "comp.container/comp-container" ["def" "comp-container" ["create-comp" ":container" "init-state" "update-state" "render"]], "main/store-ref" ["defonce" "store-ref" ["atom" ["{}"]]], "util.core/split-block" ["defn" "split-block" [["text"] ["split-block" ["string/split" "text" "br"] ["[]"] ["[]"] ":empty"]] [["lines" "acc" "buffer" "mode"] ["if" ["empty?" "lines"] ["if" ["empty?" "buffer"] "acc" ["conj" "acc" ["[]" "mode" "buffer"]]] ["let" [["cursor" ["first" "lines"]] ["left" ["rest" "lines"]]] ["case" "mode" [":empty" ["cond" [["=" "cursor" "|"] ["recur" "left" "acc" ["[]"] ":empty"]] [["string/starts-with?" "cursor" "|```"] ["recur" "left" "acc" ["[]" ["subs" "cursor" "3"]] ":code"]] [":else" ["recur" "left" "acc" ["[]" "cursor"] ":text"]]]] [":text" ["cond" [["=" "cursor" "|"] ["recur" "left" ["conj" "acc" ["[]" ":text" "buffer"]] ["[]"] ":empty"]] [["string/starts-with?" "cursor" "|```"] ["recur" "left" ["conj" "acc" ["[]" ":text" "buffer"]] ["[]" ["subs" "cursor" "3"]] ":code"]] [":else" ["recur" "left" "acc" ["conj" "buffer" "cursor"] ":text"]]]] [":code" ["if" ["string/starts-with?" "cursor" "|```"] ["recur" "left" ["conj" "acc" ["[]" "mode" "buffer"]] ["[]"] ":empty"] ["recur" "left" "acc" ["conj" "buffer" "cursor"] ":code"]]] ["throw" ["js/Error." ["str" "|Strange splitting mode: " "mode"]]]]]]]], "main/states-ref" ["defonce" "states-ref" ["atom" ["{}"]]], "comp.container/update-state" ["defn" "update-state" ["state" "k" "v"] ["assoc" "state" "k" "v"]], "comp.container/style-text" ["def" "style-text" ["{}" [":width" "600"] [":height" "600"]]]}, :namespaces {"comp.container" ["ns" "respo-markdown.comp.container" [":require" ["[]" "hsl.core" ":refer" ["[]" "hsl"]] ["[]" "respo-ui.style" ":as" "ui"] ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "textarea"]] ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]] ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]] ["[]" "respo-markdown.comp.md-block" ":refer" ["[]" "comp-md-block"]]]], "main" ["ns" "respo-markdown.main" [":require" ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "falsify-stage!" "render-element" "gc-states!"]] ["[]" "respo-markdown.comp.container" ":refer" ["[]" "comp-container"]] ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]]], "util.core" ["ns" "respo-markdown.util.core" [":require" ["[]" "clojure.string" ":as" "string"] ["[]" "cljs.reader" ":refer" ["[]" "read-string"]] ["[]" "respo-markdown.util.string" ":refer" ["[]" "br"]]]], "comp.md-block" ["ns" "respo-markdown.comp.md-block" [":require" ["[]" "hsl.core" ":refer" ["[]" "hsl"]] ["[]" "respo-ui.style" ":as" "ui"] ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "textarea"]] ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]] ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]] ["[]" "respo-markdown.util.core" ":refer" ["[]" "split-block"]]]]}, :procedures {"main" [["set!" [".-onload" "js/window"] "-main!"]], "comp.draft" [], "util.core" [], "comp.md-block" []}, :package "respo-markdown"}