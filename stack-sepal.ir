{:package "respo-markdown",
 :files {"comp.container" {:ns ["ns"
                                "respo-markdown.comp.container"
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "textarea"]]
                                 ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                 ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                 ["[]" "respo-markdown.comp.md-article" ":refer" ["[]" "comp-md-article"]]
                                 ["[]" "cljsjs.highlight"]
                                 ["[]" "cljsjs.highlight.langs.clojure"]
                                 ["[]" "cljsjs.highlight.langs.bash"]]],
                           :defs {"init-state" ["defn" "init-state" ["&" "args"] ["{}" [":draft" "|"]]],
                                  "comp-container" ["def"
                                                    "comp-container"
                                                    ["create-comp"
                                                     ":container"
                                                     "init-state"
                                                     "update-state"
                                                     ["fn"
                                                      ["store"]
                                                      ["fn"
                                                       ["state" "mutate!"]
                                                       ["div"
                                                        ["{}"
                                                         [":style"
                                                          ["merge"
                                                           "ui/global"
                                                           "ui/fullscreen"
                                                           "ui/row"
                                                           "style-container"]]]
                                                        ["textarea"
                                                         ["{}"
                                                          [":style" ["merge" "ui/textarea" "ui/flex" "style-text"]]
                                                          [":attrs"
                                                           ["{}"
                                                            [":placeholder" "|Some markdown content"]
                                                            [":value" [":draft" "state"]]]]
                                                          [":event"
                                                           ["{}"
                                                            [":input"
                                                             ["fn"
                                                              ["e" "dispatch!"]
                                                              ["mutate!" ":draft" [":value" "e"]]]]]]]]
                                                        ["comp-md-article"
                                                         [":draft" "state"]
                                                         ["{}"
                                                          [":highlight"
                                                           ["fn"
                                                            ["code" "lang"]
                                                            ["let"
                                                             [["result" [".highlight" "js/hljs" "lang" "code"]]]
                                                             ["--"
                                                              ".log"
                                                              "js/console"
                                                              "|Result"
                                                              "result"
                                                              "code"
                                                              "lang"
                                                              "js/hljs"]
                                                             [".-value" "result"]]]]]]]]]]],
                                  "style-container" ["def" "style-container" ["{}" [":align-items" ":stretch"]]],
                                  "update-state" ["defn" "update-state" ["state" "k" "v"] ["assoc" "state" "k" "v"]],
                                  "style-text" ["def" "style-text" ["{}"]]},
                           :procs []},
         "main" {:ns ["ns"
                      "respo-markdown.main"
                      [":require"
                       ["[]"
                        "respo.core"
                        ":refer"
                        ["[]" "render!" "clear-cache!" "falsify-stage!" "render-element" "gc-states!"]]
                       ["[]" "respo-markdown.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]]],
                 :defs {"dispatch!" ["defn" "dispatch!" ["op" "op-data"]],
                        "-main!" ["defn"
                                  "-main!"
                                  []
                                  ["enable-console-print!"]
                                  ["if"
                                   ["not" ["empty?" "ssr-stages"]]
                                   ["let"
                                    [["target" [".querySelector" "js/document" "|#app"]]]
                                    ["falsify-stage!"
                                     "target"
                                     ["render-element" ["comp-container" "@store-ref" "ssr-stages"] "states-ref"]
                                     "dispatch!"]]]
                                  ["render-app!"]
                                  ["add-watch" "store-ref" ":gc" ["fn" [] ["gc-states!" "states-ref"]]]
                                  ["add-watch" "store-ref" ":changes" "render-app!"]
                                  ["add-watch" "states-ref" ":changes" "render-app!"]
                                  ["println" "|App started!"]],
                        "on-jsload!" ["defn"
                                      "on-jsload!"
                                      []
                                      ["clear-cache!"]
                                      ["render-app!"]
                                      ["println" "|Code update."]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       []
                                       ["let"
                                        [["target" [".querySelector" "js/document" "|#app"]]]
                                        ["render!" ["comp-container" "@store-ref"] "target" "dispatch!" "states-ref"]]],
                        "ssr-stages" ["def"
                                      "ssr-stages"
                                      ["let"
                                       [["ssr-element" [".querySelector" "js/document" "|#ssr-stages"]]
                                        ["ssr-markup" [".getAttribute" "ssr-element" "|content"]]]
                                       ["read-string" "ssr-markup"]]],
                        "store-ref" ["defonce" "store-ref" ["atom" ["{}"]]],
                        "states-ref" ["defonce" "states-ref" ["atom" ["{}"]]]},
                 :procs [["set!" [".-onload" "js/window"] "-main!"]]},
         "util.core" {:ns ["ns"
                           "respo-markdown.util.core"
                           [":require"
                            ["[]" "clojure.string" ":as" "string"]
                            ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                            ["[]" "respo-markdown.util.string" ":refer" ["[]" "br"]]]],
                      :defs {"split-block" ["defn"
                                            "split-block"
                                            [["text"]
                                             ["split-block" ["string/split" "text" "br"] ["[]"] ["[]"] ":empty"]]
                                            [["lines" "acc" "buffer" "mode"]
                                             ["if"
                                              ["empty?" "lines"]
                                              ["if" ["empty?" "buffer"] "acc" ["conj" "acc" ["[]" "mode" "buffer"]]]
                                              ["let"
                                               [["cursor" ["first" "lines"]] ["left" ["rest" "lines"]]]
                                               ["case"
                                                "mode"
                                                [":empty"
                                                 ["cond"
                                                  [["=" "cursor" "|"] ["recur" "left" "acc" ["[]"] ":empty"]]
                                                  [["string/starts-with?" "cursor" "|```"]
                                                   ["recur" "left" "acc" ["[]" ["subs" "cursor" "3"]] ":code"]]
                                                  [":else" ["recur" "left" "acc" ["[]" "cursor"] ":text"]]]]
                                                [":text"
                                                 ["cond"
                                                  [["=" "cursor" "|"]
                                                   ["recur"
                                                    "left"
                                                    ["conj" "acc" ["[]" ":text" "buffer"]]
                                                    ["[]"]
                                                    ":empty"]]
                                                  [["string/starts-with?" "cursor" "|```"]
                                                   ["recur"
                                                    "left"
                                                    ["conj" "acc" ["[]" ":text" "buffer"]]
                                                    ["[]" ["subs" "cursor" "3"]]
                                                    ":code"]]
                                                  [":else" ["recur" "left" "acc" ["conj" "buffer" "cursor"] ":text"]]]]
                                                [":code"
                                                 ["if"
                                                  ["string/starts-with?" "cursor" "|```"]
                                                  ["recur" "left" ["conj" "acc" ["[]" "mode" "buffer"]] ["[]"] ":empty"]
                                                  ["recur" "left" "acc" ["conj" "buffer" "cursor"] ":code"]]]
                                                ["throw" ["js/Error." ["str" "|Strange splitting mode: " "mode"]]]]]]]],
                             "split-line" ["defn"
                                           "split-line"
                                           [["line"] ["split-line" ["[]"] "line" "|" ":text"]]
                                           [["acc" "line" "buffer" "mode"]
                                            ["if"
                                             ["=" "|" "line"]
                                             ["if" ["=" "|" "buffer"] "acc" ["conj" "acc" ["[]" "mode" "buffer"]]]
                                             ["let"
                                              [["cursor" ["first" "line"]] ["left" ["subs" "line" "1"]]]
                                              ["case"
                                               "mode"
                                               [":text"
                                                ["case"
                                                 "cursor"
                                                 ["|`"
                                                  ["recur"
                                                   ["conj"
                                                    ["if"
                                                     ["some?" "buffer"]
                                                     ["conj" "acc" ["[]" ":text" "buffer"]]
                                                     "acc"]]
                                                   "left"
                                                   "|"
                                                   ":code"]]
                                                 ["|h"
                                                  ["if"
                                                   ["or"
                                                    ["=" "|http://" ["subs" "line" "0" "7"]]
                                                    ["=" "|https://" ["subs" "line" "0" "8"]]]
                                                   ["let"
                                                    [["pieces" ["string/split" "line" "| "]]]
                                                    ["recur"
                                                     ["conj"
                                                      ["if"
                                                       ["=" "|" "buffer"]
                                                       "acc"
                                                       ["conj" "acc" ["[]" ":text" "buffer"]]]
                                                      ["[]" ":url" ["first" "pieces"]]]
                                                     ["str" "| " ["string/join" "| " ["rest" "pieces"]]]
                                                     "|"
                                                     ":text"]]
                                                   ["recur" "acc" "left" ["str" "buffer" "|h"] ":text"]]]
                                                 ["|["
                                                  ["let"
                                                   [["pattern" ["re-pattern" "|^\\[[^\\]]+\\]\\([^\\)]+\\)"]]
                                                    ["guess" ["re-find" "pattern" "line"]]]
                                                   ["if"
                                                    ["some?" "guess"]
                                                    ["recur"
                                                     ["conj"
                                                      ["if"
                                                       ["=" "|" "buffer"]
                                                       "acc"
                                                       ["conj" "acc" ["[]" ":text" "buffer"]]]
                                                      ["[]" ":link" "guess"]]
                                                     ["string/replace" "line" "pattern" "|"]
                                                     "|"
                                                     ":text"]
                                                    ["recur" "acc" "left" ["str" "buffer" "|["] ":text"]]]]
                                                 ["|!"
                                                  ["let"
                                                   [["pattern" ["re-pattern" "|^\\!\\[[^\\]]*\\]\\([^\\)]+\\)"]]
                                                    ["guess" ["re-find" "pattern" "line"]]]
                                                   ["if"
                                                    ["some?" "guess"]
                                                    ["recur"
                                                     ["conj"
                                                      ["if"
                                                       ["=" "|" "buffer"]
                                                       "acc"
                                                       ["conj" "acc" ["[]" ":text" "buffer"]]]
                                                      ["[]" ":image" "guess"]]
                                                     ["string/replace" "line" "pattern" "|"]
                                                     "|"
                                                     ":text"]
                                                    ["recur" "acc" "left" ["str" "buffer" "|["] ":text"]]]]
                                                 ["recur" "acc" "left" ["str" "buffer" "cursor"] ":text"]]]
                                               [":code"
                                                ["if"
                                                 ["=" "cursor" "|`"]
                                                 ["recur" ["conj" "acc" ["[]" ":code" "buffer"]] "left" "|" ":text"]
                                                 ["recur" "acc" "left" ["str" "buffer" "cursor"] ":code"]]]
                                               ["throw" ["js/Error." ["str" "|Unknown mode:" "mode"]]]]]]]]},
                      :procs []},
         "comp.md-article" {:ns ["ns"
                                 "respo-markdown.comp.md-article"
                                 [":require"
                                  ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                  ["[]" "clojure.string" ":as" "string"]
                                  ["[]" "respo-ui.style" ":as" "ui"]
                                  ["[]"
                                   "respo.alias"
                                   ":refer"
                                   ["[]" "create-comp" "create-element" "div" "pre" "code" "p" "h1" "h2" "img" "a"]]
                                  ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                  ["[]" "respo.comp.text" ":refer" ["[]" "comp-text" "comp-code"]]
                                  ["[]" "respo-markdown.util.core" ":refer" ["[]" "split-block" "split-line"]]
                                  ["[]" "respo-markdown.util.string" ":refer" ["[]" "br"]]]],
                            :defs {"comp-image" ["defn"
                                                 "comp-image"
                                                 ["chunk"]
                                                 ["let"
                                                  [["useful" ["subs" "chunk" "2" ["-" ["count" "chunk"] "1"]]]
                                                   [["[]" "content" "url"] ["string/split" "useful" "|]("]]]
                                                  ["img" ["{}" [":attrs" ["{}" [":src" "url"] [":alt" "content"]]]]]]],
                                   "h3" ["defn"
                                         "h3"
                                         ["props" "&" "children"]
                                         ["create-element" ":h3" "props" "children"]],
                                   "comp-text-block" ["def"
                                                      "comp-text-block"
                                                      ["create-comp"
                                                       ":text-block"
                                                       ["fn"
                                                        ["lines"]
                                                        ["fn"
                                                         ["state" "mutate!"]
                                                         ["div"
                                                          ["{}" [":attrs" ["{}" [":class-name" "|md-paragraph"]]]]
                                                          ["->>"
                                                           "lines"
                                                           ["map-indexed"
                                                            ["fn" ["idx" "line"] ["[]" "idx" ["comp-line" "line"]]]]]]]]]],
                                   "comp-line" ["def"
                                                "comp-line"
                                                ["create-comp"
                                                 ":line"
                                                 ["fn"
                                                  ["line"]
                                                  ["fn"
                                                   ["state" "mutate!"]
                                                   ["cond"
                                                    [["string/starts-with?" "line" "|# "]
                                                     ["h1" ["{}"] ["render-inline" ["subs" "line" "2"]]]]
                                                    [["string/starts-with?" "line" "|## "]
                                                     ["h2" ["{}"] ["render-inline" ["subs" "line" "3"]]]]
                                                    [["string/starts-with?" "line" "|### "]
                                                     ["h3" ["{}"] ["render-inline" ["subs" "line" "4"]]]]
                                                    [["string/starts-with?" "line" "|> "]
                                                     ["blockquote" ["{}"] ["render-inline" ["subs" "line" "2"]]]]
                                                    [["string/starts-with?" "line" "|* "]
                                                     ["li" ["{}"] ["render-inline" ["subs" "line" "2"]]]]
                                                    [":else" ["div" ["{}"] ["render-inline" "line"]]]]]]]],
                                   "comp-md-article" ["def"
                                                      "comp-md-article"
                                                      ["create-comp"
                                                       ":md-article"
                                                       ["fn"
                                                        ["text" "options"]
                                                        ["fn"
                                                         ["state" "mutate!"]
                                                         ["let"
                                                          [["blocks" ["split-block" "text"]]]
                                                          ["div"
                                                           ["{}"
                                                            [":style" ["merge" "ui/flex" "style-container"]]
                                                            [":attrs" ["{}" [":class-name" "|md-article"]]]]
                                                           ["->>"
                                                            "blocks"
                                                            ["map-indexed"
                                                             ["fn"
                                                              ["idx" "block"]
                                                              ["[]"
                                                               "idx"
                                                               ["let"
                                                                [[["[]" "mode" "lines"] "block"]]
                                                                ["comp-text" ["pr-str" "mode"] "nil"]
                                                                ["case"
                                                                 "mode"
                                                                 [":text" ["comp-text-block" "lines"]]
                                                                 [":code" ["comp-code-block" "lines" "options"]]
                                                                 ["comp-text" "|Unknown content."]]]]]]]]]]]]],
                                   "style-container" ["def" "style-container" ["{}" [":padding" "8"]]],
                                   "comp-link" ["defn"
                                                "comp-link"
                                                ["chunk"]
                                                ["let"
                                                 [["useful" ["subs" "chunk" "1" ["-" ["count" "chunk"] "1"]]]
                                                  [["[]" "content" "url"] ["string/split" "useful" "|]("]]]
                                                 ["a"
                                                  ["{}"
                                                   [":attrs"
                                                    ["{}"
                                                     [":href" "url"]
                                                     [":inner-text" "content"]
                                                     [":target" "|_blank"]]]]]]],
                                   "blockquote" ["defn"
                                                 "blockquote"
                                                 ["props" "&" "children"]
                                                 ["create-element" ":blockquote" "props" "children"]],
                                   "render-inline" ["defn"
                                                    "render-inline"
                                                    ["text"]
                                                    ["->>"
                                                     ["split-line" "text"]
                                                     ["map-indexed"
                                                      ["fn"
                                                       ["idx" "chunk"]
                                                       ["[]"
                                                        "idx"
                                                        ["let"
                                                         [[["[]" "mode" "content"] "chunk"]]
                                                         ["case"
                                                          "mode"
                                                          [":code" ["comp-code" "content" "nil"]]
                                                          [":url"
                                                           ["a"
                                                            ["{}"
                                                             [":attrs"
                                                              ["{}"
                                                               [":href" "content"]
                                                               [":inner-text" "content"]
                                                               [":target" "|_blank"]]]]]]
                                                          [":link" ["comp-link" "content"]]
                                                          [":image" ["comp-image" "content"]]
                                                          [":text" ["comp-text" "content" "nil"]]
                                                          ["comp-text" ["str" "|Unknown:" "content"] "nil"]]]]]]]],
                                   "comp-code-block" ["def"
                                                      "comp-code-block"
                                                      ["create-comp"
                                                       ":code-block"
                                                       ["fn"
                                                        ["lines" "options"]
                                                        ["fn"
                                                         ["state" "mutate!"]
                                                         ["let"
                                                          [["lang" ["first" "lines"]]
                                                           ["content" ["string/join" "br" ["rest" "lines"]]]
                                                           ["highlight-fn" [":highlight" "options"]]]
                                                          ["pre"
                                                           ["{}" [":attrs" ["{}" [":class-name" "|md-code-block"]]]]
                                                           ["code"
                                                            ["{}"
                                                             [":attrs"
                                                              ["if"
                                                               ["and"
                                                                ["not" ["string/blank?" "lang"]]
                                                                ["fn?" "highlight-fn"]]
                                                               ["{}" [":innerHTML" ["highlight-fn" "content" "lang"]]]
                                                               ["{}" [":inner-text" "content"]]]]]]]]]]]],
                                   "li" ["defn"
                                         "li"
                                         ["props" "&" "children"]
                                         ["create-element" ":li" "props" "children"]]},
                            :procs []}}}
